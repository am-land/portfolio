[{"content":"\r\nProject: Document how to review the data Ephesoft\u0026rsquo;s product Semantik Invoice extracted from a user’s unique invoices.\nContext: At the time I was brought in, Semantik was a new product with sparse documentation. I collaborated with the product owner to determine which features were used the most, then used that information to prioritize what to document.\nSemantik Invoice’s documentation is conversational and casual. The primary audiences are end users and administrators.\nAchievements: Researched accounting practices to understand why certain index fields existed and was the first at the company to internally document how those fields were used. Provided UX feedback to the lead UI developer and product owner.\nLink: Reviewing Invoices (Google Doc)\n\r\r\r\r","permalink":"https://www.abbymoreland.com/portfolio/sample1/","summary":"A guide I wrote for Ephesoft\u0026rsquo;s SaaS product, Semantik Invoice, on how to review invoices once data has been processed through the AI engine.","title":"Sample 1: How-To Guide"},{"content":"\r\nProject: Create a detailed feature guide to introduce and document a new plugin.\nContext: Ephesoft developed a collection of new features that fundamentally altered the way administrators use our product. One of those features was a plugin called Universal Document Automation. This plugin functioned similarly to existing components, but the key difference was that users could get started with little-to-no configuration.\nTransact’s documentation is formal. The primary audiences are operators and system administrators.\nAchievements: Figured out how to use a new plugin while still in the early development stages, including multiple use cases. Condensed the writing cycle to fit the tight deadline.\nLink: Universal Document Automation (Google Doc)\n\r\r\r\r","permalink":"https://www.abbymoreland.com/portfolio/sample2/","summary":"A feature guide I wrote for Ephesoft\u0026rsquo;s on-premise product, Transact. This guide was part of a major release and introduced a new plugin.","title":"Sample 2: Feature Guide"},{"content":"\r\nProject: Write a knowledge base article on how to resolve an issue that occurs when upgrading Transact with a specific setup.\nContext: At Ephesoft, requests for knowledge base articles came from the Customer Support engineers based on customer tickets. This particular issue occurred frequently enough that the Support team wanted to document it until the bug was fully resolved.\nA limitation is that I was unable to grab my own screenshots due to not having access to a specific test environment. I had to use the screenshots the developer provided me.\nAchievements: When I received this request, there wasn’t much information on what type of setup caused the issue. I studied the customer ticket and worked closely with an engineer to understand how to document this issue so affected users could find the article on their own, instead of waiting several days for Support to respond.\nLink: Transact Upgrade Stops When Upgrading to 2020.1.03 or Above (Google Doc)\n\r\r\r\r","permalink":"https://www.abbymoreland.com/portfolio/sample3/","summary":"A knowledge base article I wrote so sysadmins could resolve an issue when upgrading Ephesoft\u0026rsquo;s product Transact.","title":"Sample 3: Knowledge Base Article"},{"content":"\rEphesoft is an intelligent document processing (IDP) startup based out of Irvine, CA. I work as a Technical Writer on a small team (currently just me), leading our major release documentation and all of our writing projects. I write and maintain feature guides, tutorials, how-to articles, reference guides, system administrator documentation, and knowledge base articles.\nHere’s a highlight list of documentation I’ve written for Ephesoft’s two products.\nProduct: Transact  Transact’s documentation is formal. The primary audiences are operators and system administrators.\n Release Documentation\nCo-authored Transact version 2020.1.00 release documentation\n Release Notes Software Updates Known Issues and Workarounds  Co-authored Transact version 2020.1.06 release documentation\n Release Notes Software Updates Known Issues and Workarounds Installation Guide for Linux Upgrade Guide for Linux Installation Guide for Windows Upgrade Guide for Windows  Tutorials/Feature Documentation\n Universal Document Automation Document Design Accelerator Cloud OCR Plugin  Reference\n Platform Configurations and Third-Party Integrations  Knowledge Base Articles\n Transact Upgrade Stops When Upgrading to 2020.1.03 or Above with MSSQL Server and Windows Authentication “Duplicate Entry” Error When Upgrading Transact to 2019.1 or Above Import Stops Working While Processing XLSX/XLS File AJP Protocol Error – “Invalid Message Received” “Null” Error on Dashboard Reports Screen in Chrome  How-To Articles\n How to Install the RecoStar Design Studio CE 20.4 Standalone Application on a Windows Workstation How to Disable the AJP Protocol in Tomcat   Product: Semantik Invoice  Semantik Invoice’s documentation is conversational and casual. The primary audiences are end users and administrators.\n Tutorials\n Reviewing Invoices Managing Invoices Managing Extraction Fields Accessing Your Tenant ID  Reference\n Extraction Fields Glossary  Tips/Best Practices\n Tips for creating vendor master lists  Troubleshooting\n Import Failure - Missing File Extension Import Failure - Unsupported File Type Webhook Failure - Timeout Webhook Failure - Wrong Address/DNS Not Found  Ephesoft Labs I also wrote READMEs for Ephesoft Labs, in both Markdown and AsciiDoc.\n\r\r\r\r","permalink":"https://www.abbymoreland.com/portfolio/ephesoft-docs/","summary":"A highlight list of my documentation contributions to Ephesoft, an IDP startup.","title":"All Ephesoft Documentation"},{"content":"\rI created this site using the static site generator Hugo.\nContext I wanted a website to host my portfolio and blog. To start, I created a list of requirements for my site so I could make an informed decision on how to create the site. Based on those requirements, I decided to build a site via a static site generator (SSG). Between Jekyll and Hugo, I chose Hugo.\n Site details\n Static site generator: Hugo, written in Go Hugo theme: PaperMod by @adityatelange Hosted on: GitHub Deployed via: Netlify   From start the finish, building my site took me about a week of evenings. This included learning the tools, learning how Hugo works, keeping a process log, and customizing my theme.\nTools Here\u0026rsquo;s what I used to work on this project:\n Git and GitHub Langauges: HTML, CSS, Markdown Terminals: Git Bash, Windows PowerShell, Command Prompt Visual Studio Code Hugo (static site generator) Netlify  Read more I wrote a detailed guide on the process: How I Created My Hugo Site. This guide is a step-by-step tutorial for beginners, but it also gives you insight into how I figured things out and made decisions.\n Be sure to check out What I did to facilitate learning.\n \r\r\r\r","permalink":"https://www.abbymoreland.com/portfolio/the-site-youre-on-right-now/","summary":"I created this site using the static site generator Hugo.","title":"The Site You're on Right Now"},{"content":"test\n","permalink":"https://www.abbymoreland.com/blog/test/","summary":"Test summary.","title":"Test"},{"content":"\r\r\r\r\r","permalink":"https://www.abbymoreland.com/blog/content-topics-plan/","summary":"Planning an initial documentation set from scratch with a content topics plan.","title":"Planning a doc set using content topics"},{"content":"\r\rWhen I walk into the grocery store, I have a list. Though I\u0026rsquo;ve already meal-planned, considered my ingredients, and generally know what to buy, if I don\u0026rsquo;t have a grocery list I\u0026rsquo;m definitely forgetting something. It won\u0026rsquo;t be until I\u0026rsquo;m in the middle of cooking dinner after a long day that I realize\u0026mdash;and I\u0026rsquo;ll have to decide whether to go back out and buy it or make a disconcerting substitute with what I have. Both options can end poorly: either I\u0026rsquo;m hangry and eating dinner at 9pm or worse, I\u0026rsquo;ve cooked something inedible.\nIf I don\u0026rsquo;t have a written grocery plan, I\u0026rsquo;m more likely to have a hectic week. But if I take the time to write out a list, organize it by area of the store, and double check to ensure I didn\u0026rsquo;t miss anything, my week is smooth and I feel on top of things. That\u0026rsquo;s a great feeling and worth an extra thirty minutes per week.\n Simplify recurring tasks According to Asana\u0026rsquo;s research, employees spend 60% of their time on \u0026ldquo;work about work,\u0026rdquo; leaving much less time for \u0026ldquo;thoughtful, deep work.\u0026rdquo; There are a lot of documentation tasks that fall under \u0026ldquo;work about work,\u0026rdquo; such as getting approvals, waiting on reviews, writing emails, and attending meetings. While some recurring tasks are worth it to keep everything moving forward, some take extra mental load that just isn\u0026rsquo;t necessary.\nWhen you consider how many things we all have to remember on a daily basis, it\u0026rsquo;s clear that remembering every small task related to a release is a fallible strategy. By creating a checklist, you\u0026rsquo;ve simplified the part of your job where you consider everything that needs to happen before a doc release. No need to repeat that mental effort every release cycle.\n Customize your list Generic release lists are a great place to start, but the real value comes from customizing the list so it fits your product, your toolchain, your style guide. Think about what comes up every release cycle\u0026mdash;what tasks are always on the board, what doc sets are always needed, what questions do stakeholders repeatedly ask?\nFor example, at a former company we had a specific setup that required sending doc URLs to certain stakeholders ahead of the publication date. This was an important task that was easy to forget. In the days leading up to the release, we\u0026rsquo;d get frantic messages asking about it, which seemed to degrade our rapport with that team. To switch from being reactive to being proactive, I added this task to our \u0026ldquo;1-Week Before Go-Live\u0026rdquo; list. After that, we completed that task every time and restored some trust.\n Iterate on your list It may take a few releases to know if your checklists are effective. I recommend holding documentation retrospectives, even if you\u0026rsquo;re a team of one. You can use that time to evaluate your checklists.\nQuestions to consider:\n Are there any tasks that didn\u0026rsquo;t get checked off? What items can be broken down into smaller tasks? What tasks weren\u0026rsquo;t on the list? Are there any \u0026ldquo;levels\u0026rdquo; missing, e.g. you proofread the content but missed checking the typesetting?  The more you use your lists, the more effective they\u0026rsquo;ll become.\n Bonus: Add internal release communication Your internal communication strategy during go-live can be just as important as what you publish externally. Who do you need to inform the docs are live? Do you need to send out reminders a few weeks in advance to be sure reviewers know what you need from them? How can you prevent last-minute changes that could have been included from the start? What can you do to ensure docs are top-of-mind for key stakeholders?\nIdeas on tasks to include:\n Market to other teams when documentation will be published. What expectations or questions can you get ahead of? Do stakeholders generally know your publishing process? Post in the appropriate channels announcing the docs release. Do you know what those channels are? Do you have permissions/approval to post? Ensure the docs are included in internal release announcements. Who or what teams are responsible for these announcements? Does your company have an internal newsletter or announcements segment during company updates? Tell others how to submit a request if there\u0026rsquo;s a last-minute change or issue. Should they Slack a specific channel so others see the request has been made? Should they call so you can immediately address it? I\u0026rsquo;ve found that people are more invested in giving feedback if they know explicitly how to give it.   The bottom-line Streamlining your doc release process with checklists will help you and your team focus on publishing usable, professional documentation. Don\u0026rsquo;t let the overwhelm of tasks bog you down\u0026mdash;finish the release strong by knowing you have a plan.\n\r\r\r\r","permalink":"https://www.abbymoreland.com/blog/use-checklists-during-documentation-releases/","summary":"Checklists can determine whether you miss something\u0026mdash;big or small\u0026mdash;during a documentation release. Streamline your go-lives to make sure you\u0026rsquo;re focused on what matters most: the content.","title":"Use checklists during documentation releases"},{"content":"\rWhen I tried to publish my post My documentation request form for software features, my Netlify build failed. After looking at the deploy log, I immediately knew what went wrong: Netlify didn\u0026rsquo;t have a way to parse the AsciiDoc that my post was written in.\nWhen I deployed my site, I got the following error in Netlify:\n7:13:16 PM: ERROR 2022/05/11 16:13:16 asciidoctor not found in $PATH: Please install.\r7:13:16 PM: Leaving AsciiDoc content unrendered. My post is an ADOC file, which means it\u0026rsquo;s written in AsciiDoc. To use AsciiDoc with Hugo, you need to convert AsciiDoc to HTML. A straightforward way to do this is to use Asciidoctor. The Netlify error is telling me that it can\u0026rsquo;t find Asciidoctor, so there\u0026rsquo;s no way for it to publish my AsciiDoc.\nInstall Asciidoctor Make sure Asciidoctor is installed correctly. If you\u0026rsquo;ve already installed Asciidoctor in your site\u0026rsquo;s root directory, skip to Update Netlify\u0026rsquo;s build settings.\n Before you begin: Asciidoctor is a Ruby-based processor, so it\u0026rsquo;s packaged as a RubyGem. To install Asciidoctor, you\u0026rsquo;ll need to install Ruby.\n  In your site\u0026rsquo;s root directory, run:  $ gem install asciidoctor To check that it\u0026rsquo;s the latest version, run:  $ asciidoctor --version Create a new Gemfile:  $ bundle init Open your newly created Gemfile and add the asciidoctor Gem:  source \u0026#39;https://rubygems.org\u0026#39;\rgem \u0026#39;asciidoctor\u0026#39; Save the Gemfile. In your terminal, install the Gem by running:  $ bundle Commit and push your changes.  To upgrade or uninstall Asciidoctor, refer to the Asciidoctor Docs.\nUpdate Netlify\u0026rsquo;s build settings  Go to Site settings \u0026gt; Build \u0026amp; deploy \u0026gt; Continuous Deployment.  \r\rUnder Build settings, change Build command from hugo to bundle \u0026amp;\u0026amp; hugo.  \r\rOn your next deploy, this setting will tell Netlify to look for the Asciidoctor Gem in your repo.\nTroubleshooting Still getting an error? Here are a few things to check:\n Asciidoctor was installed in your site\u0026rsquo;s root directory. Your Gemfile contains only what\u0026rsquo;s listed in this guide and there are no syntax errors. Your remote repo contains the Gemfile and Gemfile.lock. Asciidoctor and Hugo are on the latest version.  If your AsciiDoc works locally, it\u0026rsquo;s most likely that Netlify can\u0026rsquo;t find Asciidoctor. The way I discovered my issue and found a resolution was by searching Netlify\u0026rsquo;s support forums and reading their docs on Ruby dependencies.\n\r\r\r\r","permalink":"https://www.abbymoreland.com/blog/asciidoc-on-netlify/","summary":"A guide on how to use AsciiDoc with Netlify by configuring Asciidoctor.","title":"How to use AsciiDoc with Hugo and Netlify"},{"content":"\rWhen I started at my current company, there wasn\u0026#39;t an intake request form for documentation requests. Any ad-hoc requests that came from the Product team, we would discuss in a weekly meeting. Other requests, such as doc site maintenance or updates from the Support team, were sent as an email that created a Jira ticket. When I began working with a CI/CD Engineering team, I quickly found out that winging it didn\u0026#39;t work. I had no system for assigning story points, didn\u0026#39;t know what tasks I could get done in a two-week sprint, and spent a ton of time asking the same questions over and over. I created this request form as a way to standardize the general information needed for feature documentation requests. It makes my job easier because I know I\u0026#39;m getting the initial information I need. I also found that it filtered out requests that stakeholders couldn\u0026#39;t define. Sometimes, the only information I had about a request amounted to a Slack message that said something like, \u0026#34;Can you document X feature?\u0026#34; This may not be an issue if you can test the feature, but if it won\u0026#39;t be implemented until the end of the sprint, you don\u0026#39;t have much to go off of. If you find you\u0026#39;re frequently getting doc requests with little information, using something like the form below may help establish that you need information up-front before you can come back with an answer. \u0026gt; **Note:** As the tech writer, I don\u0026#39;t expect stakeholders to answer everything in this form for all requests. I work with them to fill it out, adapting the form to the needs of the specific request. I also take ownership of some items, such as what type of document is needed, where on the doc site it will be located, and whether peripheral articles need to be updated. This form references software I use at my job, such as Jira and Figma. Be sure to update that if it\u0026#39;s not applicable to you. == Documentation Request Form [cols=2] |=== 2+h|REQUESTOR DETAILS s|Developer and/or SME(s): | s|Project lead/Architect: | s|Product owner: | 2+h|DOCUMENTATION DETAILS s|Document type: e|Concept, how-to/task, reference, getting started, troubleshooting, or release notes? s|Link to draft(s) in progress: | s|Article(s) to update: e|. s|Proposed location of new article: | 2+h|SOFTWARE SPECIFICATION s|Link to Jira issue(s): | s|Description of new feature or update: e|What does the feature do? How will the user use it? Why should the user care about it? s|User story: e|As a , I want to so that I can . s|Acceptance criteria (if not in Jira): e|Given When Then . s|Figma design (if a new feature): | s|Happy path: e|What steps does the user take to perform a task? s|UI changes: e|What areas or screens of the product have changed? s|Edge cases e|Are there any known issues that occur at an extreme operating parameter? s|Other notes: | |=== \u0026gt; Here\u0026#39;s a https://drive.google.com/file/d/1sYym8Mg3jkty-7279oA9g_rDoM_Yji0L/view?usp=sharing[*PDF version*]. Of course, the pitfall with a one-size-fits-all form like this is that requests come in all sizes. I\u0026#39;ve had to adapt this for different teams and products. Even then, not all features within the same product behave similarly enough that it makes sense to apply a generic template. This form is a starting point when you\u0026#39;re asked to document something you\u0026#39;ve never seen (and possibly won\u0026#39;t see for a while). If you can get Product, Engineering, or QA to spend a few minutes answering some standard questions about the new feature or update, you\u0026#39;ll be in a much better position to start writing.\r\r\r\r\r","permalink":"https://www.abbymoreland.com/blog/documentation-request-form/","summary":"The form I created to gather information about documentation requests.","title":"My documentation request form for software features"},{"content":"\r\r Summary: I wanted to build a fully customizable website without starting from scratch, so I created this site using Hugo and Netlify.\n Here\u0026rsquo;s how I created my site using a static site generator to host my blog and portfolio.\nWhy did I want a website? I created a customizable website because I wanted to:\n Host my portfolio. Contribute to my own blog. Create a landing page for my social links. Learn how to build, host, and deploy a site for free. Develop my knowledge of HTML and CSS.  My site requirements At the start of my project, I assessed what I was looking for in a site and came up with a few requirements:\nStatic\nI don’t need a dynamic site because I want to manually update all my content.\nFast with a simple interface\nI want a clean, simple site that will load quickly.\nModern look\nI don’t need anything fancy, but I don’t want my site to look outdated.\nLow-code but customizable\nI’m not a web developer, but I am technical and I want the option to fully customize my site.\nCMS or SSG? Content management systems (CMSs) like WordPress, Drupal, and Squarespace are popular for non-developers because they’re easy to learn and are all-in-one platforms. I’ve been using CMSs since I was a kid making websites for my friends. So, something like WordPress with a WYSIWYG editor was a practical choice. I could create a site, install a theme and some plugins, and publish my content in an afternoon.\nBut being part of the Write the Docs community for several years, I knew about static site generators (SSGs). SSGs are applications that create a web server using templates or components and markup files, and compile these files into a site. The site builds and is ready to serve when you deploy it, rather than waiting for someone to request it. This makes it straightforward to update\u0026mdash;all data and content are stored in your local directory\u0026mdash;and extremely fast, as there’s no database to call.\nAs a bonus, there are many open-source SSGs to choose from.\nJekyll vs Hugo Though there are SSGs for many programming languages, Jekyll is one of the original SSGs and is still widely used. It’s written in Ruby, so it requires the Ruby package before you can install it. There are lots of themes available, as well as a large online community with nearly 10,000 forks on GitHub. Popular tech writer Tom Johnson created a Jekyll documentation theme.\nNote: Jekyll does not officially support Windows, but I was able to install it on my Windows machine using Jekyll’s guide. You can also run Jekyll on the Windows Subsystem for Linux.\nHugo is another popular SSG, known for its speed and simplicity. It’s written in Go, a compiled programming language originally developed at Google. Hugo also has hundreds of themes, many of them ports from Jekyll themes. Hugo uses its own web server to build and serve the site, so there are no dependencies to get started. Once your site is ready for production, you may want to publish to a more powerful server such as Apache, though you can keep using the built-in server.\nAs a documentarian (and an SSG noob), I chose the site generator that came with clearer, more robust documentation. Plus, the Hugo community has grown substantially over the past few years, so I was able to easily troubleshoot issues.\nGetting started  This guide applies to Windows only. There’s usually more than one way to do something, so make sure to research which methods work best for your stack.\n Prerequisites Before you begin, you’ll need the following (all open-source):\n Git Bash A text editor (I like Visual Studio Code)  It’s helpful if you already have:\n Basic knowledge of the command line Knowledge of Git Knowledge of Markdown  You’ll also need free accounts for the following:\n GitHub Netlify  Install Hugo I installed Hugo on Windows via Chocolatey in the terminal. Run PowerShell as an administrator and run the following command:\nchoco install hugo -confirm If installed in your root directory, Chocolatey will install Hugo in the following file path: C:\\Users\\USERNAME\\AppData\\Local\\Temp\\chocolatey.\n There is an extended version of Hugo that some themes require. Reference the theme’s README to determine what you need.\n You can also install Hugo via other package management tools like Homebrew. Or, you can manually install it.\nIf you want to verify the version, run:\nhugo version Create a site To create a site, use the terminal to navigate to the directory where you want to store your site. It doesn’t need to be in the folder where Hugo was installed.\nEnter the command:\nhugo new site [name] Replace [name] with the name of your site.\nIf you get an error, make sure Hugo is installed correctly and the PATH variable is set.\nCreate a Git repository Now that you have a local folder, you\u0026rsquo;ll need to create a Git repository (or repo). In the Hugo site folder you just created, enter the following commands:\n$ git init $ git add . $ git commit -m \u0026#34;Initial commit\u0026#34; There should now be a new folder in the Hugo site folder named .git.\n Tip: Here’s a Git reference sheet.\n Add a theme There are many Hugo themes to choose from. I recommend choosing a theme that:\n Includes a demo. Has thorough documentation. Has been updated within the past two years.  If you’re looking to create a documentation site, Docsy is popular within the Write the Docs community.\nEach Hugo theme is a GitHub repository. Like many SSGs, Hugo uses Git submodules for managing dependencies. For an alternative method, read the Note on Hugo modules below. Or, skip directly to Step 1.\n Note on Hugo modules: Git submodules are notoriously tricky. I found this Stack Overflow discussion titled \u0026ldquo;How do I remove a submodule?\u0026rdquo; which was posted 13 years ago and is still being answered today. While they\u0026rsquo;re easy to add, submodules can get difficult if you want to make changes to them (or remove them). I\u0026rsquo;ve been thinking about switching the submodules for my sites over to Hugo modules, which from what I can tell, are much easier to manage. I was able to add and delete them to my projects much more efficiently than submodules. Here\u0026rsquo;s the guide I used: Master Hugo Modules: Managing Themes as Modules.\n Step 1: Add the theme as a submodule.\nIn the themes folder, run:\n$ git submodule add https://github.com/USERNAME/name-of-repo.git\r$ git submodule update --init --recursive Replace the URL with the URL of the theme repo.\nStep 2: Update the config.toml file to include the name of the theme:\ntheme = \u0026#39;ThemeName\u0026#39;  Making changes: If you want to make changes to the theme later, fork the repo first, then add the forked theme repo as a submodule. The GitHub link in the command above would be your own username and the name of your forked repo. Forking the theme and adding it as a submodule seems a bit redundant, but it will allow you to 1) make and deploy changes to the theme and 2) evaluate if any changes the owner makes might cause issues to your site.\n Serve the site locally To serve the site locally, enter this command in your site’s directory:\nhugo server By default, Hugo\u0026rsquo;s web server is available in a browser at http://localhost:1313/.\nAt this stage, you should have a Hugo site running locally with the demo of the theme you chose.\nHugo’s web server watches for changes while it’s running. Whenever you make a change locally, Hugo simultaneously rebuilds and serves the site. Then, LiveReload silently refreshes your browser. To watch the updates as you make them, keep the browser open on a second monitor or on one half of your monitor.\nThis setup is ideal for beginners because you can instantly see the changes you make. No need to go make a cup of coffee while waiting for your site to build.\nUnderstanding the Hugo file structure Running hugo new site creates the following directory structure:\n. ├── archetypes ├── content ├── data ├── layouts ├── static ├── themes\r└── config.toml While it’s important to learn about each folder, I found it most useful at the start to learn about the config file and the content structure.\nConfig file: The config file (default config.toml) contains the configuration for your site, such as the site title, baseURL, language, theme, and other parameters. The format can be in TOML, YAML, or JSON.\nContent: Hugo’s content is made up of markup files called content types. Your Hugo site renders the same structure used to organize your source content. Hugo illustrates this in their docs.\nIf you create a new-folder in the content folder, Hugo uses a template to build a list page (a page that links out to other pages). If you create a new-file within new-folder, Hugo builds a single page (for example, this blog post).\nContent management Hugo has thorough documentation on content management which I recommend reading. For quick reference, here’s a list of what I found helpful as a beginner:\nFront Matter\nFront matter is metadata embedded within each “content type” or page. For example, the variables you may want for a blog post include: title, author, date, categories, summary, and url. Hugo has predefined front matter variables, but you can also define your own. If you’re using a theme, be sure to reference your theme’s documentation on variables.\nThe type variable determines the type of the content; Hugo will derive this from the directory, but you can override it in your front matter.\nPage Bundles and Page Resources\nPage bundles are a way of organizing your content within your file structure. With page bundles, you can group page resources\u0026mdash;e.g. images, documents, and other pages\u0026mdash;in the same folder so it’s easier to create and update pages. To create a page bundle, add an _index.md or index.md file within the page’s root directory.\nPage resources are the files you want to include on a page. They are only accessible from their associated page bundle.\nArchetypes\nArchetypes are the templates for your content. They are Markdown files that contain front matter which is used when you create a new content file using that archetype. If a content folder has an associated archetype, new content files you create in that directory will use the archetype. If there’s no archetype for a content folder, Hugo uses the default archetype.\nShortcodes\nShortcodes are snippets inside your Markdown files that call templates. Rather than needing to use HTML tags to embed page resources (e.g. \u0026lt;iframe\u0026gt;), Hugo uses shortcodes. It comes with a lot of built-in shortcodes, but you can also make custom shortcodes. Mike Dane has a step-by-step tutorial on Shortcode Templates to demonstrate how they work.\nHost and deploy your site Host your repository on GitHub When you’re ready to publish your site, the first step is to create a remote repository in GitHub for your source code. (You don’t have to use GitHub; in fact, if you’re deploying via Netlify, you can host there too.)\n We won’t be using GitHub Pages in this tutorial, just GitHub itself.\n Step 1: Follow the steps in Creating a new repository to create a remote repo in GitHub.\n Note: You may want to add a license. If you’re unsure about this step, the Open Source Guide is a good place to start.\n Step 2: Push your code to the GitHub repo you just created:\n  Open your GitHub repo in a browser.\n  Click the Code button and copy the repo’s URL.\n  Run Git Bash as an administrator and navigate to the site directory.\n  Enter this command to connect the remote repo with your local repo:\n$ git remote add origin https://github.com/YOUR-USERNAME/name-of-your-repo   Enter git status to verify the branch.\n  Then, push your changes from your local repo to your remote repo:\n$ git push -u origin main Note: origin is the [remote repo name] and main is the [local branch name]. If you used git-init, your local branch name may be master, so you may need to adjust the command above.\n  Enter git remote -v to check if the remote repo was added successfully.\n  Deploy your site on Netlify I used Netlify’s guide to deploy my site. This guide uses GitHub as the repo source.\nHere’s an overview of what you need to do:\n Once logged in to Netlify, click a button to add a new site from GitHub. Give Netlify access to your GitHub repo. Select the repo you created for your site. Configure a few settings for your site. In the Netlify UI, click a button to build your site.  Netlify will generate a URL for your site; it should be live at that URL. You can change the name in Site settings, though the URL will end in netlify.app unless you use a custom domain.\nHost a domain You can buy a domain name from many sites. I purchased mine years ago from Google Domains for $12/yr. You can also buy a domain directly through Netlify.\nTo use your domain with Netlify, follow the steps in Configure external DNS for a custom domain. Note that updating your domain usually takes up to 24 hours.\nWorking with feature branches If you\u0026rsquo;re the sole contributor to your site, you likely won\u0026rsquo;t need to create a detailed version control strategy. However, it\u0026rsquo;s still a best practice to create feature branches so you won\u0026rsquo;t be making changes directly in your main branch. Instead, you\u0026rsquo;ll make changes to a feature branch and then merge into main. For example, if you\u0026rsquo;re writing a blog post, you can work on it in a branch specifically for adding posts.\nThere are different conventions for managing and naming branches; you may want to research what makes the most sense for your use case. To create a branch based on main, use Git in your site repo:\n$ git branch [branch_name] If you\u0026rsquo;re using Visual Studio Code to write posts, you can switch between branches directly in your workspace.\nSince you\u0026rsquo;re not creating a pull request that others will review, you likely won\u0026rsquo;t need to resolve any merge conflicts. If you do, Microsoft has a guide explaining what a merge conflict is.\n If you\u0026rsquo;re interested in learning more about managing branches, Microsoft DevOps has a guide: Adopting a Git branching strategy.\n Workflow for updating your site To make updating your site easier, I recommend creating a workflow. Your workflow will vary based on your setup, but it may be helpful to reference other docs-as-code guides, such as steps 1-5 of New Relic\u0026rsquo;s Tech writer workflow. Be sure to adjust any specific instructions to fit your own setup.\nTroubleshooting tips No matter how experienced you are, it’s inevitable that you’ll get stuck when learning something new. Whether you get an error, can’t figure something out, or just aren’t sure how to proceed, everyone who works in tech has been there many times.\nHere are some tips when you run into issues:\nStay calm when you get errors or don’t know something. It\u0026rsquo;s not easy, but staying calm is a crucial skill that will help you solve problems. Midway through creating my site, I got an error message that said I needed to rebuild everything. Instead of getting caught up thinking this was evidence that I didn’t know what I was doing, I took a few deep breaths and told myself I was going to figure it out. I was able to rationally analyze my problem and move forward. I fully believe that staying calm is the key to success.\nFocus on one problem at a time. It’s common to get overwhelmed by all the things you don’t know. But when you’re learning something new, it’s a trap to follow down every detailed path. Instead, try to stay focused on learning one component until you see the results you expected.\nGoogle everything. Google error messages, keywords, possible root causes, or anything that might produce a relevant result. Google the same thing in different ways. It’s highly likely the error you received has a documented solution on Stack Overflow, Reddit, or someone’s blog. If not, ask Hugo.\nRead error messages. It seems obvious, but sometimes we panic and skim through errors while jumping straight to problem-solving. Take a few seconds to read error messages word-for-word. (Keep in mind, though, that not all error messages are well-written.)\nTake a break. When you’re struggling with a problem, go grab a beer and focus on something else for a while. Many people solve problems while doing mundane tasks like showering; for me, I nearly always solve my hardest problems while lying awake at night.\nWhat I did to facilitate learning I contributed to a process log from installation to deployment.\nThis was a single pageless Google Doc that turned into a stream of consciousness as I figured things out. I copied/pasted error messages, linked resources I found helpful, figured out the right questions to ask, added screenshots of the process, documented my steps, and explained each component as I went along.\nWhen I encountered a blocker, I wrote down three possible root causes and troubleshot each one. This process helped me follow the logic in my initial thinking and remember what I had already tried. It also helped me write this post.\nI recommend using a process log. It takes more time, but it’s a useful way to learn. Explaining a thing in detail is a great way to solidify your knowledge.\nIf something “magically” happened the right way, I reverted my changes until I understood what I was doing.\nSometimes, you press a button or copy/paste unknown code and, magically, that makes something good happen. While this feels like a win, I forced myself to undo changes until I knew what I did to prompt the change. I then tracked in my process log what change I intended to make, what I did to make it, and why it worked.\nI wrote down the changes I wanted to make but didn’t know how yet.\nAs I customized my theme, I kept a backlog of what I wanted to change later. This kept me from getting sidetracked trying to figure out lots of detailed tasks when it was more efficient to focus on one thing at a time.\nAdditional resources  Hugo’s Get Started Guides Mike Dane’s Hugo Videos Ryan Schachte’s Creating a Blog with Hugo and GitHub in 10 minutes DistroTube’s Building Websites with Hugo Regis Philibert’s Hugo Page Resources Docsy’s Best Practices on Content  \r\r\r\r","permalink":"https://www.abbymoreland.com/blog/how-i-created-my-hugo-site/","summary":"I wanted to build a fully customizable website without starting from scratch, so I created this site using Hugo and Netlify.","title":"How I created my Hugo site"},{"content":"\rI\u0026rsquo;m a technical writer in the software industry. I\u0026rsquo;m passionate about good user-centered documentation.\n I like to work on:  How-to guides and tutorials Information architecture Style guides and templates Writing in markup languages like Markdown and AsciiDoc   I\u0026rsquo;m interested in:  Docs-as-code API documentation Topic-based authoring reStructuredText (reST)   I use these methodologies and guidelines:  Diátaxis framework GitLab\u0026rsquo;s Documentation Guidelines Google\u0026rsquo;s developer documentation style guide GOV.UK Design System\u0026rsquo;s UI components Testing your instructions Write the Docs Documentation Principles   My career path:  August 2015 to graduation - I studied as an English, Tech Comm major full time while working my way up through various part-time student positions:  IT Help Desk Specialist Technical Support for my university\u0026rsquo;s Degree Tracker tool Production Support in Web Development Software Review Analyst in Project Management   December 2019 - I was eager to gain more experience, so before I graduated, I got a job as a Technical Writer for my state\u0026rsquo;s Transportation Department. I took evening classes so I could work full time. May 2020 - I graduated with a BA in English, Writing, Rhetoric, and Technical Communication, and a certificate in Technical Communication. Spring 2020 was a difficult time to graduate; I was grateful I already had a job! June 2021 to present - I realized I wanted to be a technical writer in software, so I started at a California-based startup that develops AI software for structuring data.   Why tech writing?\nI\u0026rsquo;ve always had an interest in both technology and communication. I created websites for my friends as a kid and English was my favorite class. When I realized as a college freshman that I could pursue both interests, I thought it was too good to be true! Technical writing is the perfect career for me and every day I\u0026rsquo;m excited to learn new technology (and document it!).\n  When I\u0026rsquo;m not working, I like:  Knitting sweaters. I also like writing patterns and recently began learning how to grade knitwear (yay spreadsheets!). Cooking new recipes. I recently made some delicious Chicken Katsu. Gardening with my partner. We\u0026rsquo;re growing our first garden this year with several varieties of tomatoes, onions, peppers, peas, and some catnip for our two adorable cats. Gaming. Celeste and Spiritfarer are two of my favorites. I also recently became absorbed in the trading card game Magic: The Gathering.    Want to get in touch? Send me an email.\n \r\r\r\r","permalink":"https://www.abbymoreland.com/about/","summary":"I\u0026rsquo;m a technical writer in the software industry. I\u0026rsquo;m passionate about good user-centered documentation.\n I like to work on:  How-to guides and tutorials Information architecture Style guides and templates Writing in markup languages like Markdown and AsciiDoc   I\u0026rsquo;m interested in:  Docs-as-code API documentation Topic-based authoring reStructuredText (reST)   I use these methodologies and guidelines:  Diátaxis framework GitLab\u0026rsquo;s Documentation Guidelines Google\u0026rsquo;s developer documentation style guide GOV.","title":"About"},{"content":"Use the form below to send me an email.           Send  ","permalink":"https://www.abbymoreland.com/contact/","summary":"Use the form below to send me an email.           Send  ","title":"Contact"},{"content":"Thanks for sending me a message. I\u0026rsquo;ll be in touch as soon as I can.\n","permalink":"https://www.abbymoreland.com/success/","summary":"Thanks for sending me a message. I\u0026rsquo;ll be in touch as soon as I can.","title":"Message submitted!"},{"content":"\r\r\r\r\r\r","permalink":"https://www.abbymoreland.com/resume/","summary":"\r\r\r\r\r\r","title":"Resume"},{"content":"Subscribe to all of my blog posts via my RSS feed.\n","permalink":"https://www.abbymoreland.com/rss/","summary":"Subscribe to all of my blog posts via my RSS feed.","title":"RSS Feed"},{"content":"\r\n\r\n\r\n\r\n\r\n\r\n\n","permalink":"https://www.abbymoreland.com/portfolio/samples/","summary":"My writing samples include a how-to guide, installation guide, knowledge base article, and reference doc.","title":"Technical Writing Samples"}]